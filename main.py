import os
import logging
import random
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

logger.info("=== üîÆ Tarot Bot ===")
logger.info("TELEGRAM_TOKEN: %s", "–ï–°–¢–¨" if TELEGRAM_TOKEN else "–ù–ï–¢")
logger.info("DEEPSEEK_API_KEY: %s", "–ï–°–¢–¨" if DEEPSEEK_API_KEY else "–ù–ï–¢")

# === –ö–ê–†–¢–´ –¢–ê–†–û ===
TAROT_CARDS = [
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ",
    "–°—É–¥", "–ú–∏—Ä"
]

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
keyboard = [["üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é"], ["üìÖ –ù–∞ –º–µ—Å—è—Ü"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Tarot Wisdom Bot!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", 
        reply_markup=reply_markup
    )

def get_cards(count):
    return random.sample(TAROT_CARDS, count)

def interpret_card(card_name, spread_type):
    try:
        prompt = f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}' –¥–ª—è {spread_type} –Ω–∞ —Ä—É—Å—Å–∫–æ–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        
        response = requests.post(
            url="https://api.deepseek.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 200
            },
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            return data['choices'][0]['message']['content']
        else:
            return f"–ö–∞—Ä—Ç–∞ {card_name} —Å–æ–≤–µ—Ç—É–µ—Ç –¥–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
            
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: %s", e)
        return f"‚ú® {card_name} –≥–æ–≤–æ—Ä–∏—Ç: –≤—Å—ë –∏–¥–µ—Ç —Å–≤–æ–∏–º —á–µ—Ä–µ–¥–æ–º."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", text)
    
    if text == "üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        card = get_cards(1)[0]
        interpretation = interpret_card(card, "—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è")
        await update.message.reply_text(f"*–ö–∞—Ä—Ç–∞ –¥–Ω—è:* **{card}**\n\n{interpretation}", parse_mode='Markdown')
        
    elif text == "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é":
        cards = get_cards(3)
        response = "*–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
        for i, card in enumerate(cards, 1):
            interpretation = interpret_card(card, "–ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –Ω–µ–¥–µ–ª–∏")
            response += f"{i}. **{card}**\n{interpretation}\n\n"
        await update.message.reply_text(response, parse_mode='Markdown')
        
    elif text == "üìÖ –ù–∞ –º–µ—Å—è—Ü":
        cards = get_cards(5)
        response = "*–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü:*\n\n"
        for i, card in enumerate(cards, 1):
            interpretation = interpret_card(card, "–ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –º–µ—Å—è—Ü–∞")
            response += f"{i}. **{card}**\n{interpretation}\n\n"
        await update.message.reply_text(response, parse_mode='Markdown')
        
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üîÆ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)

if __name__ == '__main__':
    main()
