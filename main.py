import os
import asyncio
import random
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
import threading
import time

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

print("TELEGRAM_TOKEN:", "–ï–°–¢–¨" if TELEGRAM_TOKEN else "–ù–ï–¢")
print("DEEPSEEK_API_KEY:", "–ï–°–¢–¨" if DEEPSEEK_API_KEY else "–ù–ï–¢")

# === –ö–ê–†–¢–´ –¢–ê–†–û ===
TAROT_CARDS = [
    "The Fool", "The Magician", "The High Priestess", "The Empress", "The Emperor",
    "The Hierophant", "The Lovers", "The Chariot", "Strength", "The Hermit",
    "Wheel of Fortune", "Justice", "The Hanged Man", "Death", "Temperance",
    "The Devil", "The Tower", "The Star", "The Moon", "The Sun",
    "Judgement", "The World",
    "Ace of Cups", "Two of Cups", "Three of Cups", "Four of Cups", "Five of Cups",
    "Six of Cups", "Seven of Cups", "Eight of Cups", "Nine of Cups", "Ten of Cups",
    "Page of Cups", "Knight of Cups", "Queen of Cups", "King of Cups",
    "Ace of Pentacles", "Two of Pentacles", "Three of Pentacles", "Four of Pentacles", "Five of Pentacles",
    "Six of Pentacles", "Seven of Pentacles", "Eight of Pentacles", "Nine of Pentacles", "Ten of Pentacles",
    "Page of Pentacles", "Knight of Pentacles", "Queen of Pentacles", "King of Pentacles",
    "Ace of Swords", "Two of Swords", "Three of Swords", "Four of Swords", "Five of Swords",
    "Six of Swords", "Seven of Swords", "Eight of Swords", "Nine of Swords", "Ten of Swords",
    "Page of Swords", "Knight of Swords", "Queen of Swords", "King of Swords",
    "Ace of Wands", "Two of Wands", "Three of Wands", "Four of Wands", "Five of Wands",
    "Six of Wands", "Seven of Wands", "Eight of Wands", "Nine of Wands", "Ten of Wands",
    "Page of Wands", "Knight of Wands", "Queen of Wands", "King of Wands"
]

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
keyboard = [["üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é"], ["üìÖ –ù–∞ –º–µ—Å—è—Ü"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –ü–†–û–°–¢–û–ô –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
app = Flask(__name__)

@app.route('/')
def home():
    return "üîÆ Tarot Bot is running!"

@app.route('/health')
def health():
    return "OK"

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
async def cleanup_before_start():
    """–û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    from telegram import Bot
    bot = Bot(TELEGRAM_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ Bot state cleaned up successfully")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç, –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã! –Ø ‚Äî *Tarot Wisdom Bot*.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", 
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def get_cards(count):
    return random.sample(TAROT_CARDS, min(count, len(TAROT_CARDS)))

def interpret_card(card_name, spread_type):
    prompt = f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ {spread_type}. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –º—è–≥–∫–æ, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∏—Å—Ç–∏–∫–∏, –Ω–æ –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫. –ù–µ –±–æ–ª–µ–µ 100 —Å–ª–æ–≤."
    
    try:
        response = requests.post(
            url="https://api.deepseek.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 300
            }
        )
        data = response.json()
        return data['choices'][0]['message']['content']
    except Exception as e:
        return f"‚ú® –ö–∞—Ä—Ç–∞ '{card_name}' –≥–æ–≤–æ—Ä–∏—Ç: –¥–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏. –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        card = get_cards(1)[0]
        interpretation = interpret_card(card, "–¥–µ–Ω—å")
        await update.message.reply_text(f"*–ö–∞—Ä—Ç–∞ –¥–Ω—è:* **{card}**\n\n{interpretation}", parse_mode='Markdown')
        
    elif text == "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é":
        cards = get_cards(3)
        result = "*–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
        for card in cards:
            interpretation = interpret_card(card, "–Ω–µ–¥–µ–ª—é")
            result += f"**{card}**\n{interpretation}\n\n"
        await update.message.reply_text(result, parse_mode='Markdown')
        
    elif text == "üìÖ –ù–∞ –º–µ—Å—è—Ü":
        cards = get_cards(5)
        result = "*–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü:*\n\n"
        for card in cards:
            interpretation = interpret_card(card, "–º–µ—Å—è—Ü")
            result += f"**{card}**\n{interpretation}\n\n"
        await update.message.reply_text(result, parse_mode='Markdown())

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    await cleanup_before_start()
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üîÆ Tarot Bot –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await application.run_polling()

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.run(main())

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –î–∞–µ–º Flask –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    run_bot()
