import os
import random
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

print("=== üîÆ Tarot Bot –∑–∞–ø—É—â–µ–Ω ===")

# === –ö–ê–†–¢–´ –¢–ê–†–û ===
TAROT_CARDS = [
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
]

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
keyboard = [["üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é"], ["üìÖ –ù–∞ –º–µ—Å—è—Ü"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Tarot Bot!\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", 
        reply_markup=reply_markup
    )

def get_cards(count):
    return random.sample(TAROT_CARDS, count)

def interpret_card(card_name, spread_type):
    try:
        prompt = f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}' –¥–ª—è {spread_type} (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        response = requests.post(
            url="https://api.deepseek.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 150
            },
            timeout=10
        )
        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content']
    except:
        pass
    return f"–ö–∞—Ä—Ç–∞ {card_name} –≥–æ–≤–æ—Ä–∏—Ç: –¥–æ–≤–µ—Ä—è–π –∏–Ω—Ç—É–∏—Ü–∏–∏."

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    
    if text == "üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        card = get_cards(1)[0]
        interpretation = interpret_card(card, "—Å–µ–≥–æ–¥–Ω—è")
        update.message.reply_text(f"–ö–∞—Ä—Ç–∞ –¥–Ω—è: {card}\n\n{interpretation}")
        
    elif text == "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é":
        cards = get_cards(3)
        response = "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for i, card in enumerate(cards, 1):
            response += f"{i}. {card}\n{interpret_card(card, '–Ω–µ–¥–µ–ª–∏')}\n\n"
        update.message.reply_text(response)
        
    elif text == "üìÖ –ù–∞ –º–µ—Å—è—Ü":
        cards = get_cards(5)
        response = "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü:\n\n"
        for i, card in enumerate(cards, 1):
            response += f"{i}. {card}\n{interpret_card(card, '–º–µ—Å—è—Ü–∞')}\n\n"
        update.message.reply_text(response)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    updater.start_polling()
    print("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.idle()

if __name__ == '__main__':
    main()
