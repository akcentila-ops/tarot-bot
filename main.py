import os
import logging
import random
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

logger.info("=== üîÆ Tarot Bot ===")

# === FLASK –î–õ–Ø RENDER ===
app = Flask(__name__)

@app.route('/')
def home():
    return "üîÆ Tarot Bot is running!"

@app.route('/health')
def health():
    return "OK"

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    logger.info("Starting Flask on port %s", port)
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# === –ö–ê–†–¢–´ –¢–ê–†–û ===
TAROT_CARDS = [
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ",
    "–°—É–¥", "–ú–∏—Ä"
]

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
keyboard = [["üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é"], ["üìÖ –ù–∞ –º–µ—Å—è—Ü"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Tarot Wisdom Bot!\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", 
        reply_markup=reply_markup
    )

def get_cards(count):
    return random.sample(TAROT_CARDS, count)

def interpret_card(card_name, spread_type):
    try:
        prompt = f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}' –¥–ª—è {spread_type} (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        
        response = requests.post(
            url="https://api.deepseek.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 150
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            return data['choices'][0]['message']['content']
        return f"–ö–∞—Ä—Ç–∞ {card_name} –≥–æ–≤–æ—Ä–∏—Ç: –¥–æ–≤–µ—Ä—è–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
    except:
        return f"‚ú® {card_name}: –≤—Å—ë –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", text)
    
    if text == "üîÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        card = get_cards(1)[0]
        interpretation = interpret_card(card, "—Å–µ–≥–æ–¥–Ω—è")
        await update.message.reply_text(f"–ö–∞—Ä—Ç–∞ –¥–Ω—è: {card}\n\n{interpretation}")
        
    elif text == "üÉè –ù–∞ –Ω–µ–¥–µ–ª—é":
        cards = get_cards(3)
        response = "–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for i, card in enumerate(cards, 1):
            interpretation = interpret_card(card, "–Ω–µ–¥–µ–ª–∏")
            response += f"{i}. {card}\n{interpretation}\n\n"
        await update.message.reply_text(response)
        
    elif text == "üìÖ –ù–∞ –º–µ—Å—è—Ü":
        cards = get_cards(5)
        response = "–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü:\n\n"
        for i, card in enumerate(cards, 1):
            interpretation = interpret_card(card, "–º–µ—Å—è—Ü–∞")
            response += f"{i}. {card}\n{interpretation}\n\n"
        await update.message.reply_text(response)

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    import asyncio
    
    async def main():
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("üîÆ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await application.run_polling()
    
    asyncio.run(main())

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()

if __name__ == '__main__':
    main()
